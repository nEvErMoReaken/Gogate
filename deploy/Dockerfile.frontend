# STAGE 1: Build
FROM node:20-alpine AS builder

# 声明构建参数以接收代理设置
ARG HTTP_PROXY_URL
ARG HTTPS_PROXY_URL
ARG NO_PROXY_HOSTS

# 如果代理URL已提供，则设置相应的环境变量 (大写被Node/npm/pnpm工具识别)
ENV HTTP_PROXY=${HTTP_PROXY_URL}
ENV HTTPS_PROXY=${HTTPS_PROXY_URL}
ENV NO_PROXY=${NO_PROXY_HOSTS}

WORKDIR /app

# 设置 npm registry (此步骤和后续npm install将使用代理)
RUN npm config set registry https://registry.npmmirror.com

# Install pnpm globally
RUN npm install -g pnpm

# Set pnpm registry (此步骤和后续pnpm install将使用代理)
RUN pnpm config set registry https://registry.npmmirror.com

# Copy package.json and pnpm-lock.yaml
COPY ../web/package.json ../web/pnpm-lock.yaml ./

# Install all dependencies (including devDependencies for build process)
RUN pnpm install --frozen-lockfile

# Copy the rest of the web application source code
COPY ../web/ .

# Build the application
RUN pnpm build

# STAGE 2: Production Runner
FROM node:20-alpine AS runner

# 再次声明构建参数
ARG HTTP_PROXY_URL
ARG HTTPS_PROXY_URL
ARG NO_PROXY_HOSTS

# 如果代理URL已提供，则设置环境变量
ENV HTTP_PROXY=${HTTP_PROXY_URL}
ENV HTTPS_PROXY=${HTTPS_PROXY_URL}
ENV NO_PROXY=${NO_PROXY_HOSTS}

WORKDIR /app

# Set npm registry
RUN npm config set registry https://registry.npmmirror.com

# Install pnpm globally
RUN npm install -g pnpm

# Set pnpm registry
RUN pnpm config set registry https://registry.npmmirror.com

ENV NODE_ENV production

# Copy package.json and pnpm-lock.yaml from the source or builder stage
COPY ../web/package.json ../web/pnpm-lock.yaml ./

# Copy the build output from the builder stage
COPY --from=builder /app/build ./build/

# Install only production dependencies
RUN pnpm install --prod --frozen-lockfile

# Set non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 appuser
USER appuser

EXPOSE 3000

CMD [ "pnpm", "start" ]
